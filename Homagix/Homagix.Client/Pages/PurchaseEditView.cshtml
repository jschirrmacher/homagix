@page "/Purchase/Edit/{ID}"
@using Homagix.Shared
@using Homagix.Shared.Data
@inject HttpClient Http
@inject Microsoft.AspNetCore.Blazor.Services.IUriHelper UriHelper

<html>
<head>
</head>
<body>
<h1>Purchase</h1>
@if (purchase == null)
{
	<p><em>Loading...</em></p>
}
else
{
    <label for="date">Date: </label>
	<input type="date" bind="@date" id="Date" format-value="yyyy-MM-dd"/>
    <h3>Recipes</h3>
    @foreach (var recipe in chosenRecipes)
    {
        <ul onclick="@(e => RemoveRecipe(recipe))">@recipe.name</ul>
    }
    <select id="recipes" bind=@toAdd>
        @foreach (var recipe in potentialRecipes)
        {
            <option value=@recipe.name>@recipe.name</option>
        }
    </select>
    <button onclick="@((e) => chosenRecipes.Add(potentialRecipes.Find(r => r.name == toAdd)))">Add</button>
    <h3>Indiviudal items</h3>
    @foreach (var item in individualIngredients)
    {
        <ul onclick="@(() => RemoveIngredient(item))">@item.ToString()</ul>
    }
    <input type="text" bind=@ingredientToAdd />
    <button onclick="@(() => AddIngredient())">Add</button>
    <h3>Overall</h3>
    @foreach (var item in all)
    {
        <ul>@item.ToString()</ul>
    }
    <button onclick="@(() => Update())">Save</button>
}
</body>
</html>

@functions {
    [Parameter]
    string id { get; set; }


    List<Ingredient> all
    {
        get
        {
            List<Ingredient> all = new List<Ingredient>(individualIngredients);
            foreach (var item in chosenRecipes)
            {
                all.AddRange(item.ingredients);
            }
            all = Ingredient.Simplify(all);
            return all;
        }
    }
    Purchase purchase;
    DateTime date;
    string toAdd;
    string ingredientToAdd;
    List<Recipe> potentialRecipes;
    List<Recipe> chosenRecipes;
    List<Ingredient> individualIngredients = new List<Ingredient>();

    protected override async Task OnInitAsync()
    {
        potentialRecipes = (await Http.GetJsonAsync<Recipe[]>($"api/Recipe/Recipe")).ToList();
        toAdd = potentialRecipes[0].name;
        purchase = await Http.GetJsonAsync<Purchase>($"api/Purchases/Purchase/{int.Parse(id)}");
        individualIngredients = purchase.individualItems;
        chosenRecipes = purchase.toBuy ?? new List<Recipe>();
        date = purchase.time;
    }

    void RemoveRecipe(Recipe recipe)
    {
        chosenRecipes.Remove(recipe);
    }

    void RemoveIngredient(Ingredient ingredient)
    {
        individualIngredients.Remove(ingredient);
    }

    void AddIngredient()
    {
        try
        {
            individualIngredients.Add(Ingredient.Create(ingredientToAdd));
        }
        catch (Exception)
        {
            Console.WriteLine("Invalid amount!");
        }
    }

    void Update()
    {
        purchase.time = date;
        purchase.individualItems = individualIngredients;
        purchase.toBuy = chosenRecipes;
        Http.PostJsonAsync("api/Purchases/UpdatePurchase/", purchase.PurchaseJson);
        UriHelper.NavigateTo("/Purchases");
    }
}